<?php
/**
 * GenesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * cBioPortal web Public API [Beta]
 *
 * A web service for supplying JSON formatted data to cBioPortal clients. Please note that this API is currently in beta and subject to change.
 *
 * OpenAPI spec version: 1.0
 * Contact: cbioportal@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * GenesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GenesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation fetchGenesUsingPOST
     *
     * Fetch genes by ID
     *
     * @param  string[] $gene_ids List of Entrez Gene IDs or Hugo Gene Symbols (required)
     * @param  string $gene_id_type Type of gene ID (optional, default to ENTREZ_GENE_ID)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Gene[]
     */
    public function fetchGenesUsingPOST($gene_ids, $gene_id_type = 'ENTREZ_GENE_ID', $projection = 'SUMMARY')
    {
        list($response) = $this->fetchGenesUsingPOSTWithHttpInfo($gene_ids, $gene_id_type, $projection);
        return $response;
    }

    /**
     * Operation fetchGenesUsingPOSTWithHttpInfo
     *
     * Fetch genes by ID
     *
     * @param  string[] $gene_ids List of Entrez Gene IDs or Hugo Gene Symbols (required)
     * @param  string $gene_id_type Type of gene ID (optional, default to ENTREZ_GENE_ID)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Gene[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchGenesUsingPOSTWithHttpInfo($gene_ids, $gene_id_type = 'ENTREZ_GENE_ID', $projection = 'SUMMARY')
    {
        $returnType = '\Swagger\Client\Model\Gene[]';
        $request = $this->fetchGenesUsingPOSTRequest($gene_ids, $gene_id_type, $projection);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Gene[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchGenesUsingPOSTAsync
     *
     * Fetch genes by ID
     *
     * @param  string[] $gene_ids List of Entrez Gene IDs or Hugo Gene Symbols (required)
     * @param  string $gene_id_type Type of gene ID (optional, default to ENTREZ_GENE_ID)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchGenesUsingPOSTAsync($gene_ids, $gene_id_type = 'ENTREZ_GENE_ID', $projection = 'SUMMARY')
    {
        return $this->fetchGenesUsingPOSTAsyncWithHttpInfo($gene_ids, $gene_id_type, $projection)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchGenesUsingPOSTAsyncWithHttpInfo
     *
     * Fetch genes by ID
     *
     * @param  string[] $gene_ids List of Entrez Gene IDs or Hugo Gene Symbols (required)
     * @param  string $gene_id_type Type of gene ID (optional, default to ENTREZ_GENE_ID)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchGenesUsingPOSTAsyncWithHttpInfo($gene_ids, $gene_id_type = 'ENTREZ_GENE_ID', $projection = 'SUMMARY')
    {
        $returnType = '\Swagger\Client\Model\Gene[]';
        $request = $this->fetchGenesUsingPOSTRequest($gene_ids, $gene_id_type, $projection);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchGenesUsingPOST'
     *
     * @param  string[] $gene_ids List of Entrez Gene IDs or Hugo Gene Symbols (required)
     * @param  string $gene_id_type Type of gene ID (optional, default to ENTREZ_GENE_ID)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchGenesUsingPOSTRequest($gene_ids, $gene_id_type = 'ENTREZ_GENE_ID', $projection = 'SUMMARY')
    {
        // verify the required parameter 'gene_ids' is set
        if ($gene_ids === null || (is_array($gene_ids) && count($gene_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gene_ids when calling fetchGenesUsingPOST'
            );
        }

        $resourcePath = '/genes/fetch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($gene_id_type !== null) {
            $queryParams['geneIdType'] = ObjectSerializer::toQueryValue($gene_id_type);
        }
        // query params
        if ($projection !== null) {
            $queryParams['projection'] = ObjectSerializer::toQueryValue($projection);
        }


        // body params
        $_tempBody = null;
        if (isset($gene_ids)) {
            $_tempBody = $gene_ids;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAliasesOfGeneUsingGET
     *
     * Get aliases of a gene
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getAliasesOfGeneUsingGET($gene_id)
    {
        list($response) = $this->getAliasesOfGeneUsingGETWithHttpInfo($gene_id);
        return $response;
    }

    /**
     * Operation getAliasesOfGeneUsingGETWithHttpInfo
     *
     * Get aliases of a gene
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAliasesOfGeneUsingGETWithHttpInfo($gene_id)
    {
        $returnType = 'string[]';
        $request = $this->getAliasesOfGeneUsingGETRequest($gene_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAliasesOfGeneUsingGETAsync
     *
     * Get aliases of a gene
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAliasesOfGeneUsingGETAsync($gene_id)
    {
        return $this->getAliasesOfGeneUsingGETAsyncWithHttpInfo($gene_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAliasesOfGeneUsingGETAsyncWithHttpInfo
     *
     * Get aliases of a gene
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAliasesOfGeneUsingGETAsyncWithHttpInfo($gene_id)
    {
        $returnType = 'string[]';
        $request = $this->getAliasesOfGeneUsingGETRequest($gene_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAliasesOfGeneUsingGET'
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAliasesOfGeneUsingGETRequest($gene_id)
    {
        // verify the required parameter 'gene_id' is set
        if ($gene_id === null || (is_array($gene_id) && count($gene_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gene_id when calling getAliasesOfGeneUsingGET'
            );
        }

        $resourcePath = '/genes/{geneId}/aliases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gene_id !== null) {
            $resourcePath = str_replace(
                '{' . 'geneId' . '}',
                ObjectSerializer::toPathValue($gene_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllGenesUsingGET
     *
     * Get all genes
     *
     * @param  string $alias Alias of the gene (optional)
     * @param  string $direction Direction of the sort (optional, default to ASC)
     * @param  string $keyword Search keyword that applies to hugo gene symbol of the genes (optional)
     * @param  int $page_number Page number of the result list (optional, default to 0)
     * @param  int $page_size Page size of the result list (optional, default to 10000000)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     * @param  string $sort_by Name of the property that the result list is sorted by (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Gene[]
     */
    public function getAllGenesUsingGET($alias = null, $direction = 'ASC', $keyword = null, $page_number = '0', $page_size = '10000000', $projection = 'SUMMARY', $sort_by = null)
    {
        list($response) = $this->getAllGenesUsingGETWithHttpInfo($alias, $direction, $keyword, $page_number, $page_size, $projection, $sort_by);
        return $response;
    }

    /**
     * Operation getAllGenesUsingGETWithHttpInfo
     *
     * Get all genes
     *
     * @param  string $alias Alias of the gene (optional)
     * @param  string $direction Direction of the sort (optional, default to ASC)
     * @param  string $keyword Search keyword that applies to hugo gene symbol of the genes (optional)
     * @param  int $page_number Page number of the result list (optional, default to 0)
     * @param  int $page_size Page size of the result list (optional, default to 10000000)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     * @param  string $sort_by Name of the property that the result list is sorted by (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Gene[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllGenesUsingGETWithHttpInfo($alias = null, $direction = 'ASC', $keyword = null, $page_number = '0', $page_size = '10000000', $projection = 'SUMMARY', $sort_by = null)
    {
        $returnType = '\Swagger\Client\Model\Gene[]';
        $request = $this->getAllGenesUsingGETRequest($alias, $direction, $keyword, $page_number, $page_size, $projection, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Gene[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllGenesUsingGETAsync
     *
     * Get all genes
     *
     * @param  string $alias Alias of the gene (optional)
     * @param  string $direction Direction of the sort (optional, default to ASC)
     * @param  string $keyword Search keyword that applies to hugo gene symbol of the genes (optional)
     * @param  int $page_number Page number of the result list (optional, default to 0)
     * @param  int $page_size Page size of the result list (optional, default to 10000000)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     * @param  string $sort_by Name of the property that the result list is sorted by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllGenesUsingGETAsync($alias = null, $direction = 'ASC', $keyword = null, $page_number = '0', $page_size = '10000000', $projection = 'SUMMARY', $sort_by = null)
    {
        return $this->getAllGenesUsingGETAsyncWithHttpInfo($alias, $direction, $keyword, $page_number, $page_size, $projection, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllGenesUsingGETAsyncWithHttpInfo
     *
     * Get all genes
     *
     * @param  string $alias Alias of the gene (optional)
     * @param  string $direction Direction of the sort (optional, default to ASC)
     * @param  string $keyword Search keyword that applies to hugo gene symbol of the genes (optional)
     * @param  int $page_number Page number of the result list (optional, default to 0)
     * @param  int $page_size Page size of the result list (optional, default to 10000000)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     * @param  string $sort_by Name of the property that the result list is sorted by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllGenesUsingGETAsyncWithHttpInfo($alias = null, $direction = 'ASC', $keyword = null, $page_number = '0', $page_size = '10000000', $projection = 'SUMMARY', $sort_by = null)
    {
        $returnType = '\Swagger\Client\Model\Gene[]';
        $request = $this->getAllGenesUsingGETRequest($alias, $direction, $keyword, $page_number, $page_size, $projection, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllGenesUsingGET'
     *
     * @param  string $alias Alias of the gene (optional)
     * @param  string $direction Direction of the sort (optional, default to ASC)
     * @param  string $keyword Search keyword that applies to hugo gene symbol of the genes (optional)
     * @param  int $page_number Page number of the result list (optional, default to 0)
     * @param  int $page_size Page size of the result list (optional, default to 10000000)
     * @param  string $projection Level of detail of the response (optional, default to SUMMARY)
     * @param  string $sort_by Name of the property that the result list is sorted by (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllGenesUsingGETRequest($alias = null, $direction = 'ASC', $keyword = null, $page_number = '0', $page_size = '10000000', $projection = 'SUMMARY', $sort_by = null)
    {
        if ($page_number !== null && $page_number < 0) {
            throw new \InvalidArgumentException('invalid value for "$page_number" when calling GenesApi.getAllGenesUsingGET, must be bigger than or equal to 0.');
        }

        if ($page_size !== null && $page_size > 10000000) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling GenesApi.getAllGenesUsingGET, must be smaller than or equal to 10000000.');
        }
        if ($page_size !== null && $page_size < 1) {
            throw new \InvalidArgumentException('invalid value for "$page_size" when calling GenesApi.getAllGenesUsingGET, must be bigger than or equal to 1.');
        }


        $resourcePath = '/genes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($alias !== null) {
            $queryParams['alias'] = ObjectSerializer::toQueryValue($alias);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($keyword !== null) {
            $queryParams['keyword'] = ObjectSerializer::toQueryValue($keyword);
        }
        // query params
        if ($page_number !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($page_number);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size);
        }
        // query params
        if ($projection !== null) {
            $queryParams['projection'] = ObjectSerializer::toQueryValue($projection);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getGeneUsingGET
     *
     * Get a gene
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Gene
     */
    public function getGeneUsingGET($gene_id)
    {
        list($response) = $this->getGeneUsingGETWithHttpInfo($gene_id);
        return $response;
    }

    /**
     * Operation getGeneUsingGETWithHttpInfo
     *
     * Get a gene
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Gene, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGeneUsingGETWithHttpInfo($gene_id)
    {
        $returnType = '\Swagger\Client\Model\Gene';
        $request = $this->getGeneUsingGETRequest($gene_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Gene',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGeneUsingGETAsync
     *
     * Get a gene
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeneUsingGETAsync($gene_id)
    {
        return $this->getGeneUsingGETAsyncWithHttpInfo($gene_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGeneUsingGETAsyncWithHttpInfo
     *
     * Get a gene
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeneUsingGETAsyncWithHttpInfo($gene_id)
    {
        $returnType = '\Swagger\Client\Model\Gene';
        $request = $this->getGeneUsingGETRequest($gene_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getGeneUsingGET'
     *
     * @param  string $gene_id Entrez Gene ID or Hugo Gene Symbol e.g. 1 or A1BG (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getGeneUsingGETRequest($gene_id)
    {
        // verify the required parameter 'gene_id' is set
        if ($gene_id === null || (is_array($gene_id) && count($gene_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $gene_id when calling getGeneUsingGET'
            );
        }

        $resourcePath = '/genes/{geneId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($gene_id !== null) {
            $resourcePath = str_replace(
                '{' . 'geneId' . '}',
                ObjectSerializer::toPathValue($gene_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
