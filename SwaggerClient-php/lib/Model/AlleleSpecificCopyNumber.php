<?php
/**
 * AlleleSpecificCopyNumber
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * cBioPortal web Public API [Beta]
 *
 * A web service for supplying JSON formatted data to cBioPortal clients. Please note that this API is currently in beta and subject to change.
 *
 * OpenAPI spec version: 1.0
 * Contact: cbioportal@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AlleleSpecificCopyNumber Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AlleleSpecificCopyNumber implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AlleleSpecificCopyNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ascn_integer_copy_number' => 'int',
        'ascn_method' => 'string',
        'ccf_expected_copies' => 'float',
        'ccf_expected_copies_upper' => 'float',
        'clonal' => 'string',
        'expected_alt_copies' => 'int',
        'minor_copy_number' => 'int',
        'total_copy_number' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ascn_integer_copy_number' => 'int32',
        'ascn_method' => null,
        'ccf_expected_copies' => 'float',
        'ccf_expected_copies_upper' => 'float',
        'clonal' => null,
        'expected_alt_copies' => 'int32',
        'minor_copy_number' => 'int32',
        'total_copy_number' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ascn_integer_copy_number' => 'ascnIntegerCopyNumber',
        'ascn_method' => 'ascnMethod',
        'ccf_expected_copies' => 'ccfExpectedCopies',
        'ccf_expected_copies_upper' => 'ccfExpectedCopiesUpper',
        'clonal' => 'clonal',
        'expected_alt_copies' => 'expectedAltCopies',
        'minor_copy_number' => 'minorCopyNumber',
        'total_copy_number' => 'totalCopyNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ascn_integer_copy_number' => 'setAscnIntegerCopyNumber',
        'ascn_method' => 'setAscnMethod',
        'ccf_expected_copies' => 'setCcfExpectedCopies',
        'ccf_expected_copies_upper' => 'setCcfExpectedCopiesUpper',
        'clonal' => 'setClonal',
        'expected_alt_copies' => 'setExpectedAltCopies',
        'minor_copy_number' => 'setMinorCopyNumber',
        'total_copy_number' => 'setTotalCopyNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ascn_integer_copy_number' => 'getAscnIntegerCopyNumber',
        'ascn_method' => 'getAscnMethod',
        'ccf_expected_copies' => 'getCcfExpectedCopies',
        'ccf_expected_copies_upper' => 'getCcfExpectedCopiesUpper',
        'clonal' => 'getClonal',
        'expected_alt_copies' => 'getExpectedAltCopies',
        'minor_copy_number' => 'getMinorCopyNumber',
        'total_copy_number' => 'getTotalCopyNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ascn_integer_copy_number'] = isset($data['ascn_integer_copy_number']) ? $data['ascn_integer_copy_number'] : null;
        $this->container['ascn_method'] = isset($data['ascn_method']) ? $data['ascn_method'] : null;
        $this->container['ccf_expected_copies'] = isset($data['ccf_expected_copies']) ? $data['ccf_expected_copies'] : null;
        $this->container['ccf_expected_copies_upper'] = isset($data['ccf_expected_copies_upper']) ? $data['ccf_expected_copies_upper'] : null;
        $this->container['clonal'] = isset($data['clonal']) ? $data['clonal'] : null;
        $this->container['expected_alt_copies'] = isset($data['expected_alt_copies']) ? $data['expected_alt_copies'] : null;
        $this->container['minor_copy_number'] = isset($data['minor_copy_number']) ? $data['minor_copy_number'] : null;
        $this->container['total_copy_number'] = isset($data['total_copy_number']) ? $data['total_copy_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ascn_integer_copy_number
     *
     * @return int
     */
    public function getAscnIntegerCopyNumber()
    {
        return $this->container['ascn_integer_copy_number'];
    }

    /**
     * Sets ascn_integer_copy_number
     *
     * @param int $ascn_integer_copy_number ascn_integer_copy_number
     *
     * @return $this
     */
    public function setAscnIntegerCopyNumber($ascn_integer_copy_number)
    {
        $this->container['ascn_integer_copy_number'] = $ascn_integer_copy_number;

        return $this;
    }

    /**
     * Gets ascn_method
     *
     * @return string
     */
    public function getAscnMethod()
    {
        return $this->container['ascn_method'];
    }

    /**
     * Sets ascn_method
     *
     * @param string $ascn_method ascn_method
     *
     * @return $this
     */
    public function setAscnMethod($ascn_method)
    {
        $this->container['ascn_method'] = $ascn_method;

        return $this;
    }

    /**
     * Gets ccf_expected_copies
     *
     * @return float
     */
    public function getCcfExpectedCopies()
    {
        return $this->container['ccf_expected_copies'];
    }

    /**
     * Sets ccf_expected_copies
     *
     * @param float $ccf_expected_copies ccf_expected_copies
     *
     * @return $this
     */
    public function setCcfExpectedCopies($ccf_expected_copies)
    {
        $this->container['ccf_expected_copies'] = $ccf_expected_copies;

        return $this;
    }

    /**
     * Gets ccf_expected_copies_upper
     *
     * @return float
     */
    public function getCcfExpectedCopiesUpper()
    {
        return $this->container['ccf_expected_copies_upper'];
    }

    /**
     * Sets ccf_expected_copies_upper
     *
     * @param float $ccf_expected_copies_upper ccf_expected_copies_upper
     *
     * @return $this
     */
    public function setCcfExpectedCopiesUpper($ccf_expected_copies_upper)
    {
        $this->container['ccf_expected_copies_upper'] = $ccf_expected_copies_upper;

        return $this;
    }

    /**
     * Gets clonal
     *
     * @return string
     */
    public function getClonal()
    {
        return $this->container['clonal'];
    }

    /**
     * Sets clonal
     *
     * @param string $clonal clonal
     *
     * @return $this
     */
    public function setClonal($clonal)
    {
        $this->container['clonal'] = $clonal;

        return $this;
    }

    /**
     * Gets expected_alt_copies
     *
     * @return int
     */
    public function getExpectedAltCopies()
    {
        return $this->container['expected_alt_copies'];
    }

    /**
     * Sets expected_alt_copies
     *
     * @param int $expected_alt_copies expected_alt_copies
     *
     * @return $this
     */
    public function setExpectedAltCopies($expected_alt_copies)
    {
        $this->container['expected_alt_copies'] = $expected_alt_copies;

        return $this;
    }

    /**
     * Gets minor_copy_number
     *
     * @return int
     */
    public function getMinorCopyNumber()
    {
        return $this->container['minor_copy_number'];
    }

    /**
     * Sets minor_copy_number
     *
     * @param int $minor_copy_number minor_copy_number
     *
     * @return $this
     */
    public function setMinorCopyNumber($minor_copy_number)
    {
        $this->container['minor_copy_number'] = $minor_copy_number;

        return $this;
    }

    /**
     * Gets total_copy_number
     *
     * @return int
     */
    public function getTotalCopyNumber()
    {
        return $this->container['total_copy_number'];
    }

    /**
     * Sets total_copy_number
     *
     * @param int $total_copy_number total_copy_number
     *
     * @return $this
     */
    public function setTotalCopyNumber($total_copy_number)
    {
        $this->container['total_copy_number'] = $total_copy_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


