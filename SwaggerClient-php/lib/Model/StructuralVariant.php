<?php
/**
 * StructuralVariant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * cBioPortal web Public API [Beta]
 *
 * A web service for supplying JSON formatted data to cBioPortal clients. Please note that this API is currently in beta and subject to change.
 *
 * OpenAPI spec version: 1.0
 * Contact: cbioportal@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StructuralVariant Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StructuralVariant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StructuralVariant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'annotation' => 'string',
        'breakpoint_type' => 'string',
        'center' => 'string',
        'comments' => 'string',
        'connection_type' => 'string',
        'dna_support' => 'string',
        'driver_filter' => 'string',
        'driver_filter_ann' => 'string',
        'driver_tiers_filter' => 'string',
        'driver_tiers_filter_ann' => 'string',
        'event_info' => 'string',
        'external_annotation' => 'string',
        'length' => 'int',
        'molecular_profile_id' => 'string',
        'ncbi_build' => 'string',
        'normal_paired_end_read_count' => 'int',
        'normal_read_count' => 'int',
        'normal_split_read_count' => 'int',
        'normal_variant_count' => 'int',
        'patient_id' => 'string',
        'rna_support' => 'string',
        'sample_id' => 'string',
        'site1_chromosome' => 'string',
        'site1_description' => 'string',
        'site1_ensembl_transcript_id' => 'string',
        'site1_entrez_gene_id' => 'int',
        'site1_exon' => 'int',
        'site1_hugo_symbol' => 'string',
        'site1_position' => 'int',
        'site2_chromosome' => 'string',
        'site2_description' => 'string',
        'site2_effect_on_frame' => 'string',
        'site2_ensembl_transcript_id' => 'string',
        'site2_entrez_gene_id' => 'int',
        'site2_exon' => 'int',
        'site2_hugo_symbol' => 'string',
        'site2_position' => 'int',
        'study_id' => 'string',
        'tumor_paired_end_read_count' => 'int',
        'tumor_read_count' => 'int',
        'tumor_split_read_count' => 'int',
        'tumor_variant_count' => 'int',
        'unique_patient_key' => 'string',
        'unique_sample_key' => 'string',
        'variant_class' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'annotation' => null,
        'breakpoint_type' => null,
        'center' => null,
        'comments' => null,
        'connection_type' => null,
        'dna_support' => null,
        'driver_filter' => null,
        'driver_filter_ann' => null,
        'driver_tiers_filter' => null,
        'driver_tiers_filter_ann' => null,
        'event_info' => null,
        'external_annotation' => null,
        'length' => 'int32',
        'molecular_profile_id' => null,
        'ncbi_build' => null,
        'normal_paired_end_read_count' => 'int32',
        'normal_read_count' => 'int32',
        'normal_split_read_count' => 'int32',
        'normal_variant_count' => 'int32',
        'patient_id' => null,
        'rna_support' => null,
        'sample_id' => null,
        'site1_chromosome' => null,
        'site1_description' => null,
        'site1_ensembl_transcript_id' => null,
        'site1_entrez_gene_id' => 'int32',
        'site1_exon' => 'int32',
        'site1_hugo_symbol' => null,
        'site1_position' => 'int32',
        'site2_chromosome' => null,
        'site2_description' => null,
        'site2_effect_on_frame' => null,
        'site2_ensembl_transcript_id' => null,
        'site2_entrez_gene_id' => 'int32',
        'site2_exon' => 'int32',
        'site2_hugo_symbol' => null,
        'site2_position' => 'int32',
        'study_id' => null,
        'tumor_paired_end_read_count' => 'int32',
        'tumor_read_count' => 'int32',
        'tumor_split_read_count' => 'int32',
        'tumor_variant_count' => 'int32',
        'unique_patient_key' => null,
        'unique_sample_key' => null,
        'variant_class' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'annotation' => 'annotation',
        'breakpoint_type' => 'breakpointType',
        'center' => 'center',
        'comments' => 'comments',
        'connection_type' => 'connectionType',
        'dna_support' => 'dnaSupport',
        'driver_filter' => 'driverFilter',
        'driver_filter_ann' => 'driverFilterAnn',
        'driver_tiers_filter' => 'driverTiersFilter',
        'driver_tiers_filter_ann' => 'driverTiersFilterAnn',
        'event_info' => 'eventInfo',
        'external_annotation' => 'externalAnnotation',
        'length' => 'length',
        'molecular_profile_id' => 'molecularProfileId',
        'ncbi_build' => 'ncbiBuild',
        'normal_paired_end_read_count' => 'normalPairedEndReadCount',
        'normal_read_count' => 'normalReadCount',
        'normal_split_read_count' => 'normalSplitReadCount',
        'normal_variant_count' => 'normalVariantCount',
        'patient_id' => 'patientId',
        'rna_support' => 'rnaSupport',
        'sample_id' => 'sampleId',
        'site1_chromosome' => 'site1Chromosome',
        'site1_description' => 'site1Description',
        'site1_ensembl_transcript_id' => 'site1EnsemblTranscriptId',
        'site1_entrez_gene_id' => 'site1EntrezGeneId',
        'site1_exon' => 'site1Exon',
        'site1_hugo_symbol' => 'site1HugoSymbol',
        'site1_position' => 'site1Position',
        'site2_chromosome' => 'site2Chromosome',
        'site2_description' => 'site2Description',
        'site2_effect_on_frame' => 'site2EffectOnFrame',
        'site2_ensembl_transcript_id' => 'site2EnsemblTranscriptId',
        'site2_entrez_gene_id' => 'site2EntrezGeneId',
        'site2_exon' => 'site2Exon',
        'site2_hugo_symbol' => 'site2HugoSymbol',
        'site2_position' => 'site2Position',
        'study_id' => 'studyId',
        'tumor_paired_end_read_count' => 'tumorPairedEndReadCount',
        'tumor_read_count' => 'tumorReadCount',
        'tumor_split_read_count' => 'tumorSplitReadCount',
        'tumor_variant_count' => 'tumorVariantCount',
        'unique_patient_key' => 'uniquePatientKey',
        'unique_sample_key' => 'uniqueSampleKey',
        'variant_class' => 'variantClass'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'annotation' => 'setAnnotation',
        'breakpoint_type' => 'setBreakpointType',
        'center' => 'setCenter',
        'comments' => 'setComments',
        'connection_type' => 'setConnectionType',
        'dna_support' => 'setDnaSupport',
        'driver_filter' => 'setDriverFilter',
        'driver_filter_ann' => 'setDriverFilterAnn',
        'driver_tiers_filter' => 'setDriverTiersFilter',
        'driver_tiers_filter_ann' => 'setDriverTiersFilterAnn',
        'event_info' => 'setEventInfo',
        'external_annotation' => 'setExternalAnnotation',
        'length' => 'setLength',
        'molecular_profile_id' => 'setMolecularProfileId',
        'ncbi_build' => 'setNcbiBuild',
        'normal_paired_end_read_count' => 'setNormalPairedEndReadCount',
        'normal_read_count' => 'setNormalReadCount',
        'normal_split_read_count' => 'setNormalSplitReadCount',
        'normal_variant_count' => 'setNormalVariantCount',
        'patient_id' => 'setPatientId',
        'rna_support' => 'setRnaSupport',
        'sample_id' => 'setSampleId',
        'site1_chromosome' => 'setSite1Chromosome',
        'site1_description' => 'setSite1Description',
        'site1_ensembl_transcript_id' => 'setSite1EnsemblTranscriptId',
        'site1_entrez_gene_id' => 'setSite1EntrezGeneId',
        'site1_exon' => 'setSite1Exon',
        'site1_hugo_symbol' => 'setSite1HugoSymbol',
        'site1_position' => 'setSite1Position',
        'site2_chromosome' => 'setSite2Chromosome',
        'site2_description' => 'setSite2Description',
        'site2_effect_on_frame' => 'setSite2EffectOnFrame',
        'site2_ensembl_transcript_id' => 'setSite2EnsemblTranscriptId',
        'site2_entrez_gene_id' => 'setSite2EntrezGeneId',
        'site2_exon' => 'setSite2Exon',
        'site2_hugo_symbol' => 'setSite2HugoSymbol',
        'site2_position' => 'setSite2Position',
        'study_id' => 'setStudyId',
        'tumor_paired_end_read_count' => 'setTumorPairedEndReadCount',
        'tumor_read_count' => 'setTumorReadCount',
        'tumor_split_read_count' => 'setTumorSplitReadCount',
        'tumor_variant_count' => 'setTumorVariantCount',
        'unique_patient_key' => 'setUniquePatientKey',
        'unique_sample_key' => 'setUniqueSampleKey',
        'variant_class' => 'setVariantClass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'annotation' => 'getAnnotation',
        'breakpoint_type' => 'getBreakpointType',
        'center' => 'getCenter',
        'comments' => 'getComments',
        'connection_type' => 'getConnectionType',
        'dna_support' => 'getDnaSupport',
        'driver_filter' => 'getDriverFilter',
        'driver_filter_ann' => 'getDriverFilterAnn',
        'driver_tiers_filter' => 'getDriverTiersFilter',
        'driver_tiers_filter_ann' => 'getDriverTiersFilterAnn',
        'event_info' => 'getEventInfo',
        'external_annotation' => 'getExternalAnnotation',
        'length' => 'getLength',
        'molecular_profile_id' => 'getMolecularProfileId',
        'ncbi_build' => 'getNcbiBuild',
        'normal_paired_end_read_count' => 'getNormalPairedEndReadCount',
        'normal_read_count' => 'getNormalReadCount',
        'normal_split_read_count' => 'getNormalSplitReadCount',
        'normal_variant_count' => 'getNormalVariantCount',
        'patient_id' => 'getPatientId',
        'rna_support' => 'getRnaSupport',
        'sample_id' => 'getSampleId',
        'site1_chromosome' => 'getSite1Chromosome',
        'site1_description' => 'getSite1Description',
        'site1_ensembl_transcript_id' => 'getSite1EnsemblTranscriptId',
        'site1_entrez_gene_id' => 'getSite1EntrezGeneId',
        'site1_exon' => 'getSite1Exon',
        'site1_hugo_symbol' => 'getSite1HugoSymbol',
        'site1_position' => 'getSite1Position',
        'site2_chromosome' => 'getSite2Chromosome',
        'site2_description' => 'getSite2Description',
        'site2_effect_on_frame' => 'getSite2EffectOnFrame',
        'site2_ensembl_transcript_id' => 'getSite2EnsemblTranscriptId',
        'site2_entrez_gene_id' => 'getSite2EntrezGeneId',
        'site2_exon' => 'getSite2Exon',
        'site2_hugo_symbol' => 'getSite2HugoSymbol',
        'site2_position' => 'getSite2Position',
        'study_id' => 'getStudyId',
        'tumor_paired_end_read_count' => 'getTumorPairedEndReadCount',
        'tumor_read_count' => 'getTumorReadCount',
        'tumor_split_read_count' => 'getTumorSplitReadCount',
        'tumor_variant_count' => 'getTumorVariantCount',
        'unique_patient_key' => 'getUniquePatientKey',
        'unique_sample_key' => 'getUniqueSampleKey',
        'variant_class' => 'getVariantClass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['annotation'] = isset($data['annotation']) ? $data['annotation'] : null;
        $this->container['breakpoint_type'] = isset($data['breakpoint_type']) ? $data['breakpoint_type'] : null;
        $this->container['center'] = isset($data['center']) ? $data['center'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['connection_type'] = isset($data['connection_type']) ? $data['connection_type'] : null;
        $this->container['dna_support'] = isset($data['dna_support']) ? $data['dna_support'] : null;
        $this->container['driver_filter'] = isset($data['driver_filter']) ? $data['driver_filter'] : null;
        $this->container['driver_filter_ann'] = isset($data['driver_filter_ann']) ? $data['driver_filter_ann'] : null;
        $this->container['driver_tiers_filter'] = isset($data['driver_tiers_filter']) ? $data['driver_tiers_filter'] : null;
        $this->container['driver_tiers_filter_ann'] = isset($data['driver_tiers_filter_ann']) ? $data['driver_tiers_filter_ann'] : null;
        $this->container['event_info'] = isset($data['event_info']) ? $data['event_info'] : null;
        $this->container['external_annotation'] = isset($data['external_annotation']) ? $data['external_annotation'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['molecular_profile_id'] = isset($data['molecular_profile_id']) ? $data['molecular_profile_id'] : null;
        $this->container['ncbi_build'] = isset($data['ncbi_build']) ? $data['ncbi_build'] : null;
        $this->container['normal_paired_end_read_count'] = isset($data['normal_paired_end_read_count']) ? $data['normal_paired_end_read_count'] : null;
        $this->container['normal_read_count'] = isset($data['normal_read_count']) ? $data['normal_read_count'] : null;
        $this->container['normal_split_read_count'] = isset($data['normal_split_read_count']) ? $data['normal_split_read_count'] : null;
        $this->container['normal_variant_count'] = isset($data['normal_variant_count']) ? $data['normal_variant_count'] : null;
        $this->container['patient_id'] = isset($data['patient_id']) ? $data['patient_id'] : null;
        $this->container['rna_support'] = isset($data['rna_support']) ? $data['rna_support'] : null;
        $this->container['sample_id'] = isset($data['sample_id']) ? $data['sample_id'] : null;
        $this->container['site1_chromosome'] = isset($data['site1_chromosome']) ? $data['site1_chromosome'] : null;
        $this->container['site1_description'] = isset($data['site1_description']) ? $data['site1_description'] : null;
        $this->container['site1_ensembl_transcript_id'] = isset($data['site1_ensembl_transcript_id']) ? $data['site1_ensembl_transcript_id'] : null;
        $this->container['site1_entrez_gene_id'] = isset($data['site1_entrez_gene_id']) ? $data['site1_entrez_gene_id'] : null;
        $this->container['site1_exon'] = isset($data['site1_exon']) ? $data['site1_exon'] : null;
        $this->container['site1_hugo_symbol'] = isset($data['site1_hugo_symbol']) ? $data['site1_hugo_symbol'] : null;
        $this->container['site1_position'] = isset($data['site1_position']) ? $data['site1_position'] : null;
        $this->container['site2_chromosome'] = isset($data['site2_chromosome']) ? $data['site2_chromosome'] : null;
        $this->container['site2_description'] = isset($data['site2_description']) ? $data['site2_description'] : null;
        $this->container['site2_effect_on_frame'] = isset($data['site2_effect_on_frame']) ? $data['site2_effect_on_frame'] : null;
        $this->container['site2_ensembl_transcript_id'] = isset($data['site2_ensembl_transcript_id']) ? $data['site2_ensembl_transcript_id'] : null;
        $this->container['site2_entrez_gene_id'] = isset($data['site2_entrez_gene_id']) ? $data['site2_entrez_gene_id'] : null;
        $this->container['site2_exon'] = isset($data['site2_exon']) ? $data['site2_exon'] : null;
        $this->container['site2_hugo_symbol'] = isset($data['site2_hugo_symbol']) ? $data['site2_hugo_symbol'] : null;
        $this->container['site2_position'] = isset($data['site2_position']) ? $data['site2_position'] : null;
        $this->container['study_id'] = isset($data['study_id']) ? $data['study_id'] : null;
        $this->container['tumor_paired_end_read_count'] = isset($data['tumor_paired_end_read_count']) ? $data['tumor_paired_end_read_count'] : null;
        $this->container['tumor_read_count'] = isset($data['tumor_read_count']) ? $data['tumor_read_count'] : null;
        $this->container['tumor_split_read_count'] = isset($data['tumor_split_read_count']) ? $data['tumor_split_read_count'] : null;
        $this->container['tumor_variant_count'] = isset($data['tumor_variant_count']) ? $data['tumor_variant_count'] : null;
        $this->container['unique_patient_key'] = isset($data['unique_patient_key']) ? $data['unique_patient_key'] : null;
        $this->container['unique_sample_key'] = isset($data['unique_sample_key']) ? $data['unique_sample_key'] : null;
        $this->container['variant_class'] = isset($data['variant_class']) ? $data['variant_class'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets annotation
     *
     * @return string
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param string $annotation annotation
     *
     * @return $this
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }

    /**
     * Gets breakpoint_type
     *
     * @return string
     */
    public function getBreakpointType()
    {
        return $this->container['breakpoint_type'];
    }

    /**
     * Sets breakpoint_type
     *
     * @param string $breakpoint_type breakpoint_type
     *
     * @return $this
     */
    public function setBreakpointType($breakpoint_type)
    {
        $this->container['breakpoint_type'] = $breakpoint_type;

        return $this;
    }

    /**
     * Gets center
     *
     * @return string
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     *
     * @param string $center center
     *
     * @return $this
     */
    public function setCenter($center)
    {
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets connection_type
     *
     * @return string
     */
    public function getConnectionType()
    {
        return $this->container['connection_type'];
    }

    /**
     * Sets connection_type
     *
     * @param string $connection_type connection_type
     *
     * @return $this
     */
    public function setConnectionType($connection_type)
    {
        $this->container['connection_type'] = $connection_type;

        return $this;
    }

    /**
     * Gets dna_support
     *
     * @return string
     */
    public function getDnaSupport()
    {
        return $this->container['dna_support'];
    }

    /**
     * Sets dna_support
     *
     * @param string $dna_support dna_support
     *
     * @return $this
     */
    public function setDnaSupport($dna_support)
    {
        $this->container['dna_support'] = $dna_support;

        return $this;
    }

    /**
     * Gets driver_filter
     *
     * @return string
     */
    public function getDriverFilter()
    {
        return $this->container['driver_filter'];
    }

    /**
     * Sets driver_filter
     *
     * @param string $driver_filter driver_filter
     *
     * @return $this
     */
    public function setDriverFilter($driver_filter)
    {
        $this->container['driver_filter'] = $driver_filter;

        return $this;
    }

    /**
     * Gets driver_filter_ann
     *
     * @return string
     */
    public function getDriverFilterAnn()
    {
        return $this->container['driver_filter_ann'];
    }

    /**
     * Sets driver_filter_ann
     *
     * @param string $driver_filter_ann driver_filter_ann
     *
     * @return $this
     */
    public function setDriverFilterAnn($driver_filter_ann)
    {
        $this->container['driver_filter_ann'] = $driver_filter_ann;

        return $this;
    }

    /**
     * Gets driver_tiers_filter
     *
     * @return string
     */
    public function getDriverTiersFilter()
    {
        return $this->container['driver_tiers_filter'];
    }

    /**
     * Sets driver_tiers_filter
     *
     * @param string $driver_tiers_filter driver_tiers_filter
     *
     * @return $this
     */
    public function setDriverTiersFilter($driver_tiers_filter)
    {
        $this->container['driver_tiers_filter'] = $driver_tiers_filter;

        return $this;
    }

    /**
     * Gets driver_tiers_filter_ann
     *
     * @return string
     */
    public function getDriverTiersFilterAnn()
    {
        return $this->container['driver_tiers_filter_ann'];
    }

    /**
     * Sets driver_tiers_filter_ann
     *
     * @param string $driver_tiers_filter_ann driver_tiers_filter_ann
     *
     * @return $this
     */
    public function setDriverTiersFilterAnn($driver_tiers_filter_ann)
    {
        $this->container['driver_tiers_filter_ann'] = $driver_tiers_filter_ann;

        return $this;
    }

    /**
     * Gets event_info
     *
     * @return string
     */
    public function getEventInfo()
    {
        return $this->container['event_info'];
    }

    /**
     * Sets event_info
     *
     * @param string $event_info event_info
     *
     * @return $this
     */
    public function setEventInfo($event_info)
    {
        $this->container['event_info'] = $event_info;

        return $this;
    }

    /**
     * Gets external_annotation
     *
     * @return string
     */
    public function getExternalAnnotation()
    {
        return $this->container['external_annotation'];
    }

    /**
     * Sets external_annotation
     *
     * @param string $external_annotation external_annotation
     *
     * @return $this
     */
    public function setExternalAnnotation($external_annotation)
    {
        $this->container['external_annotation'] = $external_annotation;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets molecular_profile_id
     *
     * @return string
     */
    public function getMolecularProfileId()
    {
        return $this->container['molecular_profile_id'];
    }

    /**
     * Sets molecular_profile_id
     *
     * @param string $molecular_profile_id molecular_profile_id
     *
     * @return $this
     */
    public function setMolecularProfileId($molecular_profile_id)
    {
        $this->container['molecular_profile_id'] = $molecular_profile_id;

        return $this;
    }

    /**
     * Gets ncbi_build
     *
     * @return string
     */
    public function getNcbiBuild()
    {
        return $this->container['ncbi_build'];
    }

    /**
     * Sets ncbi_build
     *
     * @param string $ncbi_build ncbi_build
     *
     * @return $this
     */
    public function setNcbiBuild($ncbi_build)
    {
        $this->container['ncbi_build'] = $ncbi_build;

        return $this;
    }

    /**
     * Gets normal_paired_end_read_count
     *
     * @return int
     */
    public function getNormalPairedEndReadCount()
    {
        return $this->container['normal_paired_end_read_count'];
    }

    /**
     * Sets normal_paired_end_read_count
     *
     * @param int $normal_paired_end_read_count normal_paired_end_read_count
     *
     * @return $this
     */
    public function setNormalPairedEndReadCount($normal_paired_end_read_count)
    {
        $this->container['normal_paired_end_read_count'] = $normal_paired_end_read_count;

        return $this;
    }

    /**
     * Gets normal_read_count
     *
     * @return int
     */
    public function getNormalReadCount()
    {
        return $this->container['normal_read_count'];
    }

    /**
     * Sets normal_read_count
     *
     * @param int $normal_read_count normal_read_count
     *
     * @return $this
     */
    public function setNormalReadCount($normal_read_count)
    {
        $this->container['normal_read_count'] = $normal_read_count;

        return $this;
    }

    /**
     * Gets normal_split_read_count
     *
     * @return int
     */
    public function getNormalSplitReadCount()
    {
        return $this->container['normal_split_read_count'];
    }

    /**
     * Sets normal_split_read_count
     *
     * @param int $normal_split_read_count normal_split_read_count
     *
     * @return $this
     */
    public function setNormalSplitReadCount($normal_split_read_count)
    {
        $this->container['normal_split_read_count'] = $normal_split_read_count;

        return $this;
    }

    /**
     * Gets normal_variant_count
     *
     * @return int
     */
    public function getNormalVariantCount()
    {
        return $this->container['normal_variant_count'];
    }

    /**
     * Sets normal_variant_count
     *
     * @param int $normal_variant_count normal_variant_count
     *
     * @return $this
     */
    public function setNormalVariantCount($normal_variant_count)
    {
        $this->container['normal_variant_count'] = $normal_variant_count;

        return $this;
    }

    /**
     * Gets patient_id
     *
     * @return string
     */
    public function getPatientId()
    {
        return $this->container['patient_id'];
    }

    /**
     * Sets patient_id
     *
     * @param string $patient_id patient_id
     *
     * @return $this
     */
    public function setPatientId($patient_id)
    {
        $this->container['patient_id'] = $patient_id;

        return $this;
    }

    /**
     * Gets rna_support
     *
     * @return string
     */
    public function getRnaSupport()
    {
        return $this->container['rna_support'];
    }

    /**
     * Sets rna_support
     *
     * @param string $rna_support rna_support
     *
     * @return $this
     */
    public function setRnaSupport($rna_support)
    {
        $this->container['rna_support'] = $rna_support;

        return $this;
    }

    /**
     * Gets sample_id
     *
     * @return string
     */
    public function getSampleId()
    {
        return $this->container['sample_id'];
    }

    /**
     * Sets sample_id
     *
     * @param string $sample_id sample_id
     *
     * @return $this
     */
    public function setSampleId($sample_id)
    {
        $this->container['sample_id'] = $sample_id;

        return $this;
    }

    /**
     * Gets site1_chromosome
     *
     * @return string
     */
    public function getSite1Chromosome()
    {
        return $this->container['site1_chromosome'];
    }

    /**
     * Sets site1_chromosome
     *
     * @param string $site1_chromosome site1_chromosome
     *
     * @return $this
     */
    public function setSite1Chromosome($site1_chromosome)
    {
        $this->container['site1_chromosome'] = $site1_chromosome;

        return $this;
    }

    /**
     * Gets site1_description
     *
     * @return string
     */
    public function getSite1Description()
    {
        return $this->container['site1_description'];
    }

    /**
     * Sets site1_description
     *
     * @param string $site1_description site1_description
     *
     * @return $this
     */
    public function setSite1Description($site1_description)
    {
        $this->container['site1_description'] = $site1_description;

        return $this;
    }

    /**
     * Gets site1_ensembl_transcript_id
     *
     * @return string
     */
    public function getSite1EnsemblTranscriptId()
    {
        return $this->container['site1_ensembl_transcript_id'];
    }

    /**
     * Sets site1_ensembl_transcript_id
     *
     * @param string $site1_ensembl_transcript_id site1_ensembl_transcript_id
     *
     * @return $this
     */
    public function setSite1EnsemblTranscriptId($site1_ensembl_transcript_id)
    {
        $this->container['site1_ensembl_transcript_id'] = $site1_ensembl_transcript_id;

        return $this;
    }

    /**
     * Gets site1_entrez_gene_id
     *
     * @return int
     */
    public function getSite1EntrezGeneId()
    {
        return $this->container['site1_entrez_gene_id'];
    }

    /**
     * Sets site1_entrez_gene_id
     *
     * @param int $site1_entrez_gene_id site1_entrez_gene_id
     *
     * @return $this
     */
    public function setSite1EntrezGeneId($site1_entrez_gene_id)
    {
        $this->container['site1_entrez_gene_id'] = $site1_entrez_gene_id;

        return $this;
    }

    /**
     * Gets site1_exon
     *
     * @return int
     */
    public function getSite1Exon()
    {
        return $this->container['site1_exon'];
    }

    /**
     * Sets site1_exon
     *
     * @param int $site1_exon site1_exon
     *
     * @return $this
     */
    public function setSite1Exon($site1_exon)
    {
        $this->container['site1_exon'] = $site1_exon;

        return $this;
    }

    /**
     * Gets site1_hugo_symbol
     *
     * @return string
     */
    public function getSite1HugoSymbol()
    {
        return $this->container['site1_hugo_symbol'];
    }

    /**
     * Sets site1_hugo_symbol
     *
     * @param string $site1_hugo_symbol site1_hugo_symbol
     *
     * @return $this
     */
    public function setSite1HugoSymbol($site1_hugo_symbol)
    {
        $this->container['site1_hugo_symbol'] = $site1_hugo_symbol;

        return $this;
    }

    /**
     * Gets site1_position
     *
     * @return int
     */
    public function getSite1Position()
    {
        return $this->container['site1_position'];
    }

    /**
     * Sets site1_position
     *
     * @param int $site1_position site1_position
     *
     * @return $this
     */
    public function setSite1Position($site1_position)
    {
        $this->container['site1_position'] = $site1_position;

        return $this;
    }

    /**
     * Gets site2_chromosome
     *
     * @return string
     */
    public function getSite2Chromosome()
    {
        return $this->container['site2_chromosome'];
    }

    /**
     * Sets site2_chromosome
     *
     * @param string $site2_chromosome site2_chromosome
     *
     * @return $this
     */
    public function setSite2Chromosome($site2_chromosome)
    {
        $this->container['site2_chromosome'] = $site2_chromosome;

        return $this;
    }

    /**
     * Gets site2_description
     *
     * @return string
     */
    public function getSite2Description()
    {
        return $this->container['site2_description'];
    }

    /**
     * Sets site2_description
     *
     * @param string $site2_description site2_description
     *
     * @return $this
     */
    public function setSite2Description($site2_description)
    {
        $this->container['site2_description'] = $site2_description;

        return $this;
    }

    /**
     * Gets site2_effect_on_frame
     *
     * @return string
     */
    public function getSite2EffectOnFrame()
    {
        return $this->container['site2_effect_on_frame'];
    }

    /**
     * Sets site2_effect_on_frame
     *
     * @param string $site2_effect_on_frame site2_effect_on_frame
     *
     * @return $this
     */
    public function setSite2EffectOnFrame($site2_effect_on_frame)
    {
        $this->container['site2_effect_on_frame'] = $site2_effect_on_frame;

        return $this;
    }

    /**
     * Gets site2_ensembl_transcript_id
     *
     * @return string
     */
    public function getSite2EnsemblTranscriptId()
    {
        return $this->container['site2_ensembl_transcript_id'];
    }

    /**
     * Sets site2_ensembl_transcript_id
     *
     * @param string $site2_ensembl_transcript_id site2_ensembl_transcript_id
     *
     * @return $this
     */
    public function setSite2EnsemblTranscriptId($site2_ensembl_transcript_id)
    {
        $this->container['site2_ensembl_transcript_id'] = $site2_ensembl_transcript_id;

        return $this;
    }

    /**
     * Gets site2_entrez_gene_id
     *
     * @return int
     */
    public function getSite2EntrezGeneId()
    {
        return $this->container['site2_entrez_gene_id'];
    }

    /**
     * Sets site2_entrez_gene_id
     *
     * @param int $site2_entrez_gene_id site2_entrez_gene_id
     *
     * @return $this
     */
    public function setSite2EntrezGeneId($site2_entrez_gene_id)
    {
        $this->container['site2_entrez_gene_id'] = $site2_entrez_gene_id;

        return $this;
    }

    /**
     * Gets site2_exon
     *
     * @return int
     */
    public function getSite2Exon()
    {
        return $this->container['site2_exon'];
    }

    /**
     * Sets site2_exon
     *
     * @param int $site2_exon site2_exon
     *
     * @return $this
     */
    public function setSite2Exon($site2_exon)
    {
        $this->container['site2_exon'] = $site2_exon;

        return $this;
    }

    /**
     * Gets site2_hugo_symbol
     *
     * @return string
     */
    public function getSite2HugoSymbol()
    {
        return $this->container['site2_hugo_symbol'];
    }

    /**
     * Sets site2_hugo_symbol
     *
     * @param string $site2_hugo_symbol site2_hugo_symbol
     *
     * @return $this
     */
    public function setSite2HugoSymbol($site2_hugo_symbol)
    {
        $this->container['site2_hugo_symbol'] = $site2_hugo_symbol;

        return $this;
    }

    /**
     * Gets site2_position
     *
     * @return int
     */
    public function getSite2Position()
    {
        return $this->container['site2_position'];
    }

    /**
     * Sets site2_position
     *
     * @param int $site2_position site2_position
     *
     * @return $this
     */
    public function setSite2Position($site2_position)
    {
        $this->container['site2_position'] = $site2_position;

        return $this;
    }

    /**
     * Gets study_id
     *
     * @return string
     */
    public function getStudyId()
    {
        return $this->container['study_id'];
    }

    /**
     * Sets study_id
     *
     * @param string $study_id study_id
     *
     * @return $this
     */
    public function setStudyId($study_id)
    {
        $this->container['study_id'] = $study_id;

        return $this;
    }

    /**
     * Gets tumor_paired_end_read_count
     *
     * @return int
     */
    public function getTumorPairedEndReadCount()
    {
        return $this->container['tumor_paired_end_read_count'];
    }

    /**
     * Sets tumor_paired_end_read_count
     *
     * @param int $tumor_paired_end_read_count tumor_paired_end_read_count
     *
     * @return $this
     */
    public function setTumorPairedEndReadCount($tumor_paired_end_read_count)
    {
        $this->container['tumor_paired_end_read_count'] = $tumor_paired_end_read_count;

        return $this;
    }

    /**
     * Gets tumor_read_count
     *
     * @return int
     */
    public function getTumorReadCount()
    {
        return $this->container['tumor_read_count'];
    }

    /**
     * Sets tumor_read_count
     *
     * @param int $tumor_read_count tumor_read_count
     *
     * @return $this
     */
    public function setTumorReadCount($tumor_read_count)
    {
        $this->container['tumor_read_count'] = $tumor_read_count;

        return $this;
    }

    /**
     * Gets tumor_split_read_count
     *
     * @return int
     */
    public function getTumorSplitReadCount()
    {
        return $this->container['tumor_split_read_count'];
    }

    /**
     * Sets tumor_split_read_count
     *
     * @param int $tumor_split_read_count tumor_split_read_count
     *
     * @return $this
     */
    public function setTumorSplitReadCount($tumor_split_read_count)
    {
        $this->container['tumor_split_read_count'] = $tumor_split_read_count;

        return $this;
    }

    /**
     * Gets tumor_variant_count
     *
     * @return int
     */
    public function getTumorVariantCount()
    {
        return $this->container['tumor_variant_count'];
    }

    /**
     * Sets tumor_variant_count
     *
     * @param int $tumor_variant_count tumor_variant_count
     *
     * @return $this
     */
    public function setTumorVariantCount($tumor_variant_count)
    {
        $this->container['tumor_variant_count'] = $tumor_variant_count;

        return $this;
    }

    /**
     * Gets unique_patient_key
     *
     * @return string
     */
    public function getUniquePatientKey()
    {
        return $this->container['unique_patient_key'];
    }

    /**
     * Sets unique_patient_key
     *
     * @param string $unique_patient_key unique_patient_key
     *
     * @return $this
     */
    public function setUniquePatientKey($unique_patient_key)
    {
        $this->container['unique_patient_key'] = $unique_patient_key;

        return $this;
    }

    /**
     * Gets unique_sample_key
     *
     * @return string
     */
    public function getUniqueSampleKey()
    {
        return $this->container['unique_sample_key'];
    }

    /**
     * Sets unique_sample_key
     *
     * @param string $unique_sample_key unique_sample_key
     *
     * @return $this
     */
    public function setUniqueSampleKey($unique_sample_key)
    {
        $this->container['unique_sample_key'] = $unique_sample_key;

        return $this;
    }

    /**
     * Gets variant_class
     *
     * @return string
     */
    public function getVariantClass()
    {
        return $this->container['variant_class'];
    }

    /**
     * Sets variant_class
     *
     * @param string $variant_class variant_class
     *
     * @return $this
     */
    public function setVariantClass($variant_class)
    {
        $this->container['variant_class'] = $variant_class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


