<?php
/**
 * CopyNumberSeg
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * cBioPortal web Public API [Beta]
 *
 * A web service for supplying JSON formatted data to cBioPortal clients. Please note that this API is currently in beta and subject to change.
 *
 * OpenAPI spec version: 1.0
 * Contact: cbioportal@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CopyNumberSeg Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CopyNumberSeg implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CopyNumberSeg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'chromosome' => 'string',
        'end' => 'int',
        'number_of_probes' => 'int',
        'patient_id' => 'string',
        'sample_id' => 'string',
        'segment_mean' => 'float',
        'start' => 'int',
        'study_id' => 'string',
        'unique_patient_key' => 'string',
        'unique_sample_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'chromosome' => null,
        'end' => 'int32',
        'number_of_probes' => 'int32',
        'patient_id' => null,
        'sample_id' => null,
        'segment_mean' => null,
        'start' => 'int32',
        'study_id' => null,
        'unique_patient_key' => null,
        'unique_sample_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'chromosome' => 'chromosome',
        'end' => 'end',
        'number_of_probes' => 'numberOfProbes',
        'patient_id' => 'patientId',
        'sample_id' => 'sampleId',
        'segment_mean' => 'segmentMean',
        'start' => 'start',
        'study_id' => 'studyId',
        'unique_patient_key' => 'uniquePatientKey',
        'unique_sample_key' => 'uniqueSampleKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'chromosome' => 'setChromosome',
        'end' => 'setEnd',
        'number_of_probes' => 'setNumberOfProbes',
        'patient_id' => 'setPatientId',
        'sample_id' => 'setSampleId',
        'segment_mean' => 'setSegmentMean',
        'start' => 'setStart',
        'study_id' => 'setStudyId',
        'unique_patient_key' => 'setUniquePatientKey',
        'unique_sample_key' => 'setUniqueSampleKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'chromosome' => 'getChromosome',
        'end' => 'getEnd',
        'number_of_probes' => 'getNumberOfProbes',
        'patient_id' => 'getPatientId',
        'sample_id' => 'getSampleId',
        'segment_mean' => 'getSegmentMean',
        'start' => 'getStart',
        'study_id' => 'getStudyId',
        'unique_patient_key' => 'getUniquePatientKey',
        'unique_sample_key' => 'getUniqueSampleKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['chromosome'] = isset($data['chromosome']) ? $data['chromosome'] : null;
        $this->container['end'] = isset($data['end']) ? $data['end'] : null;
        $this->container['number_of_probes'] = isset($data['number_of_probes']) ? $data['number_of_probes'] : null;
        $this->container['patient_id'] = isset($data['patient_id']) ? $data['patient_id'] : null;
        $this->container['sample_id'] = isset($data['sample_id']) ? $data['sample_id'] : null;
        $this->container['segment_mean'] = isset($data['segment_mean']) ? $data['segment_mean'] : null;
        $this->container['start'] = isset($data['start']) ? $data['start'] : null;
        $this->container['study_id'] = isset($data['study_id']) ? $data['study_id'] : null;
        $this->container['unique_patient_key'] = isset($data['unique_patient_key']) ? $data['unique_patient_key'] : null;
        $this->container['unique_sample_key'] = isset($data['unique_sample_key']) ? $data['unique_sample_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['chromosome'] === null) {
            $invalidProperties[] = "'chromosome' can't be null";
        }
        if ($this->container['end'] === null) {
            $invalidProperties[] = "'end' can't be null";
        }
        if ($this->container['number_of_probes'] === null) {
            $invalidProperties[] = "'number_of_probes' can't be null";
        }
        if ($this->container['patient_id'] === null) {
            $invalidProperties[] = "'patient_id' can't be null";
        }
        if ($this->container['sample_id'] === null) {
            $invalidProperties[] = "'sample_id' can't be null";
        }
        if ($this->container['segment_mean'] === null) {
            $invalidProperties[] = "'segment_mean' can't be null";
        }
        if ($this->container['start'] === null) {
            $invalidProperties[] = "'start' can't be null";
        }
        if ($this->container['study_id'] === null) {
            $invalidProperties[] = "'study_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets chromosome
     *
     * @return string
     */
    public function getChromosome()
    {
        return $this->container['chromosome'];
    }

    /**
     * Sets chromosome
     *
     * @param string $chromosome chromosome
     *
     * @return $this
     */
    public function setChromosome($chromosome)
    {
        $this->container['chromosome'] = $chromosome;

        return $this;
    }

    /**
     * Gets end
     *
     * @return int
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param int $end end
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets number_of_probes
     *
     * @return int
     */
    public function getNumberOfProbes()
    {
        return $this->container['number_of_probes'];
    }

    /**
     * Sets number_of_probes
     *
     * @param int $number_of_probes number_of_probes
     *
     * @return $this
     */
    public function setNumberOfProbes($number_of_probes)
    {
        $this->container['number_of_probes'] = $number_of_probes;

        return $this;
    }

    /**
     * Gets patient_id
     *
     * @return string
     */
    public function getPatientId()
    {
        return $this->container['patient_id'];
    }

    /**
     * Sets patient_id
     *
     * @param string $patient_id patient_id
     *
     * @return $this
     */
    public function setPatientId($patient_id)
    {
        $this->container['patient_id'] = $patient_id;

        return $this;
    }

    /**
     * Gets sample_id
     *
     * @return string
     */
    public function getSampleId()
    {
        return $this->container['sample_id'];
    }

    /**
     * Sets sample_id
     *
     * @param string $sample_id sample_id
     *
     * @return $this
     */
    public function setSampleId($sample_id)
    {
        $this->container['sample_id'] = $sample_id;

        return $this;
    }

    /**
     * Gets segment_mean
     *
     * @return float
     */
    public function getSegmentMean()
    {
        return $this->container['segment_mean'];
    }

    /**
     * Sets segment_mean
     *
     * @param float $segment_mean segment_mean
     *
     * @return $this
     */
    public function setSegmentMean($segment_mean)
    {
        $this->container['segment_mean'] = $segment_mean;

        return $this;
    }

    /**
     * Gets start
     *
     * @return int
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param int $start start
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets study_id
     *
     * @return string
     */
    public function getStudyId()
    {
        return $this->container['study_id'];
    }

    /**
     * Sets study_id
     *
     * @param string $study_id study_id
     *
     * @return $this
     */
    public function setStudyId($study_id)
    {
        $this->container['study_id'] = $study_id;

        return $this;
    }

    /**
     * Gets unique_patient_key
     *
     * @return string
     */
    public function getUniquePatientKey()
    {
        return $this->container['unique_patient_key'];
    }

    /**
     * Sets unique_patient_key
     *
     * @param string $unique_patient_key unique_patient_key
     *
     * @return $this
     */
    public function setUniquePatientKey($unique_patient_key)
    {
        $this->container['unique_patient_key'] = $unique_patient_key;

        return $this;
    }

    /**
     * Gets unique_sample_key
     *
     * @return string
     */
    public function getUniqueSampleKey()
    {
        return $this->container['unique_sample_key'];
    }

    /**
     * Sets unique_sample_key
     *
     * @param string $unique_sample_key unique_sample_key
     *
     * @return $this
     */
    public function setUniqueSampleKey($unique_sample_key)
    {
        $this->container['unique_sample_key'] = $unique_sample_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


