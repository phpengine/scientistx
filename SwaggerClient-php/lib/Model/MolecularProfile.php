<?php
/**
 * MolecularProfile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * cBioPortal web Public API [Beta]
 *
 * A web service for supplying JSON formatted data to cBioPortal clients. Please note that this API is currently in beta and subject to change.
 *
 * OpenAPI spec version: 1.0
 * Contact: cbioportal@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MolecularProfile Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MolecularProfile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MolecularProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'datatype' => 'string',
        'description' => 'string',
        'generic_assay_type' => 'string',
        'molecular_alteration_type' => 'string',
        'molecular_profile_id' => 'string',
        'name' => 'string',
        'patient_level' => 'bool',
        'pivot_threshold' => 'float',
        'show_profile_in_analysis_tab' => 'bool',
        'sort_order' => 'string',
        'study' => '\Swagger\Client\Model\CancerStudy',
        'study_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'datatype' => null,
        'description' => null,
        'generic_assay_type' => null,
        'molecular_alteration_type' => null,
        'molecular_profile_id' => null,
        'name' => null,
        'patient_level' => null,
        'pivot_threshold' => 'float',
        'show_profile_in_analysis_tab' => null,
        'sort_order' => null,
        'study' => null,
        'study_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'datatype' => 'datatype',
        'description' => 'description',
        'generic_assay_type' => 'genericAssayType',
        'molecular_alteration_type' => 'molecularAlterationType',
        'molecular_profile_id' => 'molecularProfileId',
        'name' => 'name',
        'patient_level' => 'patientLevel',
        'pivot_threshold' => 'pivotThreshold',
        'show_profile_in_analysis_tab' => 'showProfileInAnalysisTab',
        'sort_order' => 'sortOrder',
        'study' => 'study',
        'study_id' => 'studyId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'datatype' => 'setDatatype',
        'description' => 'setDescription',
        'generic_assay_type' => 'setGenericAssayType',
        'molecular_alteration_type' => 'setMolecularAlterationType',
        'molecular_profile_id' => 'setMolecularProfileId',
        'name' => 'setName',
        'patient_level' => 'setPatientLevel',
        'pivot_threshold' => 'setPivotThreshold',
        'show_profile_in_analysis_tab' => 'setShowProfileInAnalysisTab',
        'sort_order' => 'setSortOrder',
        'study' => 'setStudy',
        'study_id' => 'setStudyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'datatype' => 'getDatatype',
        'description' => 'getDescription',
        'generic_assay_type' => 'getGenericAssayType',
        'molecular_alteration_type' => 'getMolecularAlterationType',
        'molecular_profile_id' => 'getMolecularProfileId',
        'name' => 'getName',
        'patient_level' => 'getPatientLevel',
        'pivot_threshold' => 'getPivotThreshold',
        'show_profile_in_analysis_tab' => 'getShowProfileInAnalysisTab',
        'sort_order' => 'getSortOrder',
        'study' => 'getStudy',
        'study_id' => 'getStudyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MOLECULAR_ALTERATION_TYPE_MUTATION_EXTENDED = 'MUTATION_EXTENDED';
    const MOLECULAR_ALTERATION_TYPE_MUTATION_UNCALLED = 'MUTATION_UNCALLED';
    const MOLECULAR_ALTERATION_TYPE_FUSION = 'FUSION';
    const MOLECULAR_ALTERATION_TYPE_STRUCTURAL_VARIANT = 'STRUCTURAL_VARIANT';
    const MOLECULAR_ALTERATION_TYPE_COPY_NUMBER_ALTERATION = 'COPY_NUMBER_ALTERATION';
    const MOLECULAR_ALTERATION_TYPE_MICRO_RNA_EXPRESSION = 'MICRO_RNA_EXPRESSION';
    const MOLECULAR_ALTERATION_TYPE_MRNA_EXPRESSION = 'MRNA_EXPRESSION';
    const MOLECULAR_ALTERATION_TYPE_MRNA_EXPRESSION_NORMALS = 'MRNA_EXPRESSION_NORMALS';
    const MOLECULAR_ALTERATION_TYPE_RNA_EXPRESSION = 'RNA_EXPRESSION';
    const MOLECULAR_ALTERATION_TYPE_METHYLATION = 'METHYLATION';
    const MOLECULAR_ALTERATION_TYPE_METHYLATION_BINARY = 'METHYLATION_BINARY';
    const MOLECULAR_ALTERATION_TYPE_PHOSPHORYLATION = 'PHOSPHORYLATION';
    const MOLECULAR_ALTERATION_TYPE_PROTEIN_LEVEL = 'PROTEIN_LEVEL';
    const MOLECULAR_ALTERATION_TYPE_PROTEIN_ARRAY_PROTEIN_LEVEL = 'PROTEIN_ARRAY_PROTEIN_LEVEL';
    const MOLECULAR_ALTERATION_TYPE_PROTEIN_ARRAY_PHOSPHORYLATION = 'PROTEIN_ARRAY_PHOSPHORYLATION';
    const MOLECULAR_ALTERATION_TYPE_GENESET_SCORE = 'GENESET_SCORE';
    const MOLECULAR_ALTERATION_TYPE_GENERIC_ASSAY = 'GENERIC_ASSAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMolecularAlterationTypeAllowableValues()
    {
        return [
            self::MOLECULAR_ALTERATION_TYPE_MUTATION_EXTENDED,
            self::MOLECULAR_ALTERATION_TYPE_MUTATION_UNCALLED,
            self::MOLECULAR_ALTERATION_TYPE_FUSION,
            self::MOLECULAR_ALTERATION_TYPE_STRUCTURAL_VARIANT,
            self::MOLECULAR_ALTERATION_TYPE_COPY_NUMBER_ALTERATION,
            self::MOLECULAR_ALTERATION_TYPE_MICRO_RNA_EXPRESSION,
            self::MOLECULAR_ALTERATION_TYPE_MRNA_EXPRESSION,
            self::MOLECULAR_ALTERATION_TYPE_MRNA_EXPRESSION_NORMALS,
            self::MOLECULAR_ALTERATION_TYPE_RNA_EXPRESSION,
            self::MOLECULAR_ALTERATION_TYPE_METHYLATION,
            self::MOLECULAR_ALTERATION_TYPE_METHYLATION_BINARY,
            self::MOLECULAR_ALTERATION_TYPE_PHOSPHORYLATION,
            self::MOLECULAR_ALTERATION_TYPE_PROTEIN_LEVEL,
            self::MOLECULAR_ALTERATION_TYPE_PROTEIN_ARRAY_PROTEIN_LEVEL,
            self::MOLECULAR_ALTERATION_TYPE_PROTEIN_ARRAY_PHOSPHORYLATION,
            self::MOLECULAR_ALTERATION_TYPE_GENESET_SCORE,
            self::MOLECULAR_ALTERATION_TYPE_GENERIC_ASSAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['datatype'] = isset($data['datatype']) ? $data['datatype'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['generic_assay_type'] = isset($data['generic_assay_type']) ? $data['generic_assay_type'] : null;
        $this->container['molecular_alteration_type'] = isset($data['molecular_alteration_type']) ? $data['molecular_alteration_type'] : null;
        $this->container['molecular_profile_id'] = isset($data['molecular_profile_id']) ? $data['molecular_profile_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['patient_level'] = isset($data['patient_level']) ? $data['patient_level'] : null;
        $this->container['pivot_threshold'] = isset($data['pivot_threshold']) ? $data['pivot_threshold'] : null;
        $this->container['show_profile_in_analysis_tab'] = isset($data['show_profile_in_analysis_tab']) ? $data['show_profile_in_analysis_tab'] : null;
        $this->container['sort_order'] = isset($data['sort_order']) ? $data['sort_order'] : null;
        $this->container['study'] = isset($data['study']) ? $data['study'] : null;
        $this->container['study_id'] = isset($data['study_id']) ? $data['study_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMolecularAlterationTypeAllowableValues();
        if (!is_null($this->container['molecular_alteration_type']) && !in_array($this->container['molecular_alteration_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'molecular_alteration_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['molecular_profile_id'] === null) {
            $invalidProperties[] = "'molecular_profile_id' can't be null";
        }
        if ($this->container['patient_level'] === null) {
            $invalidProperties[] = "'patient_level' can't be null";
        }
        if ($this->container['study_id'] === null) {
            $invalidProperties[] = "'study_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets datatype
     *
     * @return string
     */
    public function getDatatype()
    {
        return $this->container['datatype'];
    }

    /**
     * Sets datatype
     *
     * @param string $datatype datatype
     *
     * @return $this
     */
    public function setDatatype($datatype)
    {
        $this->container['datatype'] = $datatype;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets generic_assay_type
     *
     * @return string
     */
    public function getGenericAssayType()
    {
        return $this->container['generic_assay_type'];
    }

    /**
     * Sets generic_assay_type
     *
     * @param string $generic_assay_type generic_assay_type
     *
     * @return $this
     */
    public function setGenericAssayType($generic_assay_type)
    {
        $this->container['generic_assay_type'] = $generic_assay_type;

        return $this;
    }

    /**
     * Gets molecular_alteration_type
     *
     * @return string
     */
    public function getMolecularAlterationType()
    {
        return $this->container['molecular_alteration_type'];
    }

    /**
     * Sets molecular_alteration_type
     *
     * @param string $molecular_alteration_type molecular_alteration_type
     *
     * @return $this
     */
    public function setMolecularAlterationType($molecular_alteration_type)
    {
        $allowedValues = $this->getMolecularAlterationTypeAllowableValues();
        if (!is_null($molecular_alteration_type) && !in_array($molecular_alteration_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'molecular_alteration_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['molecular_alteration_type'] = $molecular_alteration_type;

        return $this;
    }

    /**
     * Gets molecular_profile_id
     *
     * @return string
     */
    public function getMolecularProfileId()
    {
        return $this->container['molecular_profile_id'];
    }

    /**
     * Sets molecular_profile_id
     *
     * @param string $molecular_profile_id molecular_profile_id
     *
     * @return $this
     */
    public function setMolecularProfileId($molecular_profile_id)
    {
        $this->container['molecular_profile_id'] = $molecular_profile_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets patient_level
     *
     * @return bool
     */
    public function getPatientLevel()
    {
        return $this->container['patient_level'];
    }

    /**
     * Sets patient_level
     *
     * @param bool $patient_level patient_level
     *
     * @return $this
     */
    public function setPatientLevel($patient_level)
    {
        $this->container['patient_level'] = $patient_level;

        return $this;
    }

    /**
     * Gets pivot_threshold
     *
     * @return float
     */
    public function getPivotThreshold()
    {
        return $this->container['pivot_threshold'];
    }

    /**
     * Sets pivot_threshold
     *
     * @param float $pivot_threshold pivot_threshold
     *
     * @return $this
     */
    public function setPivotThreshold($pivot_threshold)
    {
        $this->container['pivot_threshold'] = $pivot_threshold;

        return $this;
    }

    /**
     * Gets show_profile_in_analysis_tab
     *
     * @return bool
     */
    public function getShowProfileInAnalysisTab()
    {
        return $this->container['show_profile_in_analysis_tab'];
    }

    /**
     * Sets show_profile_in_analysis_tab
     *
     * @param bool $show_profile_in_analysis_tab show_profile_in_analysis_tab
     *
     * @return $this
     */
    public function setShowProfileInAnalysisTab($show_profile_in_analysis_tab)
    {
        $this->container['show_profile_in_analysis_tab'] = $show_profile_in_analysis_tab;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param string $sort_order sort_order
     *
     * @return $this
     */
    public function setSortOrder($sort_order)
    {
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets study
     *
     * @return \Swagger\Client\Model\CancerStudy
     */
    public function getStudy()
    {
        return $this->container['study'];
    }

    /**
     * Sets study
     *
     * @param \Swagger\Client\Model\CancerStudy $study study
     *
     * @return $this
     */
    public function setStudy($study)
    {
        $this->container['study'] = $study;

        return $this;
    }

    /**
     * Gets study_id
     *
     * @return string
     */
    public function getStudyId()
    {
        return $this->container['study_id'];
    }

    /**
     * Sets study_id
     *
     * @param string $study_id study_id
     *
     * @return $this
     */
    public function setStudyId($study_id)
    {
        $this->container['study_id'] = $study_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


