<?php
/**
 * CancerStudy
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * cBioPortal web Public API [Beta]
 *
 * A web service for supplying JSON formatted data to cBioPortal clients. Please note that this API is currently in beta and subject to change.
 *
 * OpenAPI spec version: 1.0
 * Contact: cbioportal@googlegroups.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CancerStudy Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CancerStudy implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CancerStudy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'all_sample_count' => 'int',
        'cancer_type' => '\Swagger\Client\Model\TypeOfCancer',
        'cancer_type_id' => 'string',
        'citation' => 'string',
        'cna_sample_count' => 'int',
        'complete_sample_count' => 'int',
        'description' => 'string',
        'groups' => 'string',
        'import_date' => 'string',
        'mass_spectrometry_sample_count' => 'int',
        'methylation_hm27_sample_count' => 'int',
        'mi_rna_sample_count' => 'int',
        'mrna_microarray_sample_count' => 'int',
        'mrna_rna_seq_sample_count' => 'int',
        'mrna_rna_seq_v2_sample_count' => 'int',
        'name' => 'string',
        'pmid' => 'string',
        'public_study' => 'bool',
        'read_permission' => 'bool',
        'reference_genome' => 'string',
        'rppa_sample_count' => 'int',
        'sequenced_sample_count' => 'int',
        'status' => 'int',
        'study_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'all_sample_count' => 'int32',
        'cancer_type' => null,
        'cancer_type_id' => null,
        'citation' => null,
        'cna_sample_count' => 'int32',
        'complete_sample_count' => 'int32',
        'description' => null,
        'groups' => null,
        'import_date' => null,
        'mass_spectrometry_sample_count' => 'int32',
        'methylation_hm27_sample_count' => 'int32',
        'mi_rna_sample_count' => 'int32',
        'mrna_microarray_sample_count' => 'int32',
        'mrna_rna_seq_sample_count' => 'int32',
        'mrna_rna_seq_v2_sample_count' => 'int32',
        'name' => null,
        'pmid' => null,
        'public_study' => null,
        'read_permission' => null,
        'reference_genome' => null,
        'rppa_sample_count' => 'int32',
        'sequenced_sample_count' => 'int32',
        'status' => 'int32',
        'study_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'all_sample_count' => 'allSampleCount',
        'cancer_type' => 'cancerType',
        'cancer_type_id' => 'cancerTypeId',
        'citation' => 'citation',
        'cna_sample_count' => 'cnaSampleCount',
        'complete_sample_count' => 'completeSampleCount',
        'description' => 'description',
        'groups' => 'groups',
        'import_date' => 'importDate',
        'mass_spectrometry_sample_count' => 'massSpectrometrySampleCount',
        'methylation_hm27_sample_count' => 'methylationHm27SampleCount',
        'mi_rna_sample_count' => 'miRnaSampleCount',
        'mrna_microarray_sample_count' => 'mrnaMicroarraySampleCount',
        'mrna_rna_seq_sample_count' => 'mrnaRnaSeqSampleCount',
        'mrna_rna_seq_v2_sample_count' => 'mrnaRnaSeqV2SampleCount',
        'name' => 'name',
        'pmid' => 'pmid',
        'public_study' => 'publicStudy',
        'read_permission' => 'readPermission',
        'reference_genome' => 'referenceGenome',
        'rppa_sample_count' => 'rppaSampleCount',
        'sequenced_sample_count' => 'sequencedSampleCount',
        'status' => 'status',
        'study_id' => 'studyId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'all_sample_count' => 'setAllSampleCount',
        'cancer_type' => 'setCancerType',
        'cancer_type_id' => 'setCancerTypeId',
        'citation' => 'setCitation',
        'cna_sample_count' => 'setCnaSampleCount',
        'complete_sample_count' => 'setCompleteSampleCount',
        'description' => 'setDescription',
        'groups' => 'setGroups',
        'import_date' => 'setImportDate',
        'mass_spectrometry_sample_count' => 'setMassSpectrometrySampleCount',
        'methylation_hm27_sample_count' => 'setMethylationHm27SampleCount',
        'mi_rna_sample_count' => 'setMiRnaSampleCount',
        'mrna_microarray_sample_count' => 'setMrnaMicroarraySampleCount',
        'mrna_rna_seq_sample_count' => 'setMrnaRnaSeqSampleCount',
        'mrna_rna_seq_v2_sample_count' => 'setMrnaRnaSeqV2SampleCount',
        'name' => 'setName',
        'pmid' => 'setPmid',
        'public_study' => 'setPublicStudy',
        'read_permission' => 'setReadPermission',
        'reference_genome' => 'setReferenceGenome',
        'rppa_sample_count' => 'setRppaSampleCount',
        'sequenced_sample_count' => 'setSequencedSampleCount',
        'status' => 'setStatus',
        'study_id' => 'setStudyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'all_sample_count' => 'getAllSampleCount',
        'cancer_type' => 'getCancerType',
        'cancer_type_id' => 'getCancerTypeId',
        'citation' => 'getCitation',
        'cna_sample_count' => 'getCnaSampleCount',
        'complete_sample_count' => 'getCompleteSampleCount',
        'description' => 'getDescription',
        'groups' => 'getGroups',
        'import_date' => 'getImportDate',
        'mass_spectrometry_sample_count' => 'getMassSpectrometrySampleCount',
        'methylation_hm27_sample_count' => 'getMethylationHm27SampleCount',
        'mi_rna_sample_count' => 'getMiRnaSampleCount',
        'mrna_microarray_sample_count' => 'getMrnaMicroarraySampleCount',
        'mrna_rna_seq_sample_count' => 'getMrnaRnaSeqSampleCount',
        'mrna_rna_seq_v2_sample_count' => 'getMrnaRnaSeqV2SampleCount',
        'name' => 'getName',
        'pmid' => 'getPmid',
        'public_study' => 'getPublicStudy',
        'read_permission' => 'getReadPermission',
        'reference_genome' => 'getReferenceGenome',
        'rppa_sample_count' => 'getRppaSampleCount',
        'sequenced_sample_count' => 'getSequencedSampleCount',
        'status' => 'getStatus',
        'study_id' => 'getStudyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['all_sample_count'] = isset($data['all_sample_count']) ? $data['all_sample_count'] : null;
        $this->container['cancer_type'] = isset($data['cancer_type']) ? $data['cancer_type'] : null;
        $this->container['cancer_type_id'] = isset($data['cancer_type_id']) ? $data['cancer_type_id'] : null;
        $this->container['citation'] = isset($data['citation']) ? $data['citation'] : null;
        $this->container['cna_sample_count'] = isset($data['cna_sample_count']) ? $data['cna_sample_count'] : null;
        $this->container['complete_sample_count'] = isset($data['complete_sample_count']) ? $data['complete_sample_count'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['import_date'] = isset($data['import_date']) ? $data['import_date'] : null;
        $this->container['mass_spectrometry_sample_count'] = isset($data['mass_spectrometry_sample_count']) ? $data['mass_spectrometry_sample_count'] : null;
        $this->container['methylation_hm27_sample_count'] = isset($data['methylation_hm27_sample_count']) ? $data['methylation_hm27_sample_count'] : null;
        $this->container['mi_rna_sample_count'] = isset($data['mi_rna_sample_count']) ? $data['mi_rna_sample_count'] : null;
        $this->container['mrna_microarray_sample_count'] = isset($data['mrna_microarray_sample_count']) ? $data['mrna_microarray_sample_count'] : null;
        $this->container['mrna_rna_seq_sample_count'] = isset($data['mrna_rna_seq_sample_count']) ? $data['mrna_rna_seq_sample_count'] : null;
        $this->container['mrna_rna_seq_v2_sample_count'] = isset($data['mrna_rna_seq_v2_sample_count']) ? $data['mrna_rna_seq_v2_sample_count'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pmid'] = isset($data['pmid']) ? $data['pmid'] : null;
        $this->container['public_study'] = isset($data['public_study']) ? $data['public_study'] : null;
        $this->container['read_permission'] = isset($data['read_permission']) ? $data['read_permission'] : null;
        $this->container['reference_genome'] = isset($data['reference_genome']) ? $data['reference_genome'] : null;
        $this->container['rppa_sample_count'] = isset($data['rppa_sample_count']) ? $data['rppa_sample_count'] : null;
        $this->container['sequenced_sample_count'] = isset($data['sequenced_sample_count']) ? $data['sequenced_sample_count'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['study_id'] = isset($data['study_id']) ? $data['study_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['study_id'] === null) {
            $invalidProperties[] = "'study_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets all_sample_count
     *
     * @return int
     */
    public function getAllSampleCount()
    {
        return $this->container['all_sample_count'];
    }

    /**
     * Sets all_sample_count
     *
     * @param int $all_sample_count all_sample_count
     *
     * @return $this
     */
    public function setAllSampleCount($all_sample_count)
    {
        $this->container['all_sample_count'] = $all_sample_count;

        return $this;
    }

    /**
     * Gets cancer_type
     *
     * @return \Swagger\Client\Model\TypeOfCancer
     */
    public function getCancerType()
    {
        return $this->container['cancer_type'];
    }

    /**
     * Sets cancer_type
     *
     * @param \Swagger\Client\Model\TypeOfCancer $cancer_type cancer_type
     *
     * @return $this
     */
    public function setCancerType($cancer_type)
    {
        $this->container['cancer_type'] = $cancer_type;

        return $this;
    }

    /**
     * Gets cancer_type_id
     *
     * @return string
     */
    public function getCancerTypeId()
    {
        return $this->container['cancer_type_id'];
    }

    /**
     * Sets cancer_type_id
     *
     * @param string $cancer_type_id cancer_type_id
     *
     * @return $this
     */
    public function setCancerTypeId($cancer_type_id)
    {
        $this->container['cancer_type_id'] = $cancer_type_id;

        return $this;
    }

    /**
     * Gets citation
     *
     * @return string
     */
    public function getCitation()
    {
        return $this->container['citation'];
    }

    /**
     * Sets citation
     *
     * @param string $citation citation
     *
     * @return $this
     */
    public function setCitation($citation)
    {
        $this->container['citation'] = $citation;

        return $this;
    }

    /**
     * Gets cna_sample_count
     *
     * @return int
     */
    public function getCnaSampleCount()
    {
        return $this->container['cna_sample_count'];
    }

    /**
     * Sets cna_sample_count
     *
     * @param int $cna_sample_count cna_sample_count
     *
     * @return $this
     */
    public function setCnaSampleCount($cna_sample_count)
    {
        $this->container['cna_sample_count'] = $cna_sample_count;

        return $this;
    }

    /**
     * Gets complete_sample_count
     *
     * @return int
     */
    public function getCompleteSampleCount()
    {
        return $this->container['complete_sample_count'];
    }

    /**
     * Sets complete_sample_count
     *
     * @param int $complete_sample_count complete_sample_count
     *
     * @return $this
     */
    public function setCompleteSampleCount($complete_sample_count)
    {
        $this->container['complete_sample_count'] = $complete_sample_count;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets import_date
     *
     * @return string
     */
    public function getImportDate()
    {
        return $this->container['import_date'];
    }

    /**
     * Sets import_date
     *
     * @param string $import_date import_date
     *
     * @return $this
     */
    public function setImportDate($import_date)
    {
        $this->container['import_date'] = $import_date;

        return $this;
    }

    /**
     * Gets mass_spectrometry_sample_count
     *
     * @return int
     */
    public function getMassSpectrometrySampleCount()
    {
        return $this->container['mass_spectrometry_sample_count'];
    }

    /**
     * Sets mass_spectrometry_sample_count
     *
     * @param int $mass_spectrometry_sample_count mass_spectrometry_sample_count
     *
     * @return $this
     */
    public function setMassSpectrometrySampleCount($mass_spectrometry_sample_count)
    {
        $this->container['mass_spectrometry_sample_count'] = $mass_spectrometry_sample_count;

        return $this;
    }

    /**
     * Gets methylation_hm27_sample_count
     *
     * @return int
     */
    public function getMethylationHm27SampleCount()
    {
        return $this->container['methylation_hm27_sample_count'];
    }

    /**
     * Sets methylation_hm27_sample_count
     *
     * @param int $methylation_hm27_sample_count methylation_hm27_sample_count
     *
     * @return $this
     */
    public function setMethylationHm27SampleCount($methylation_hm27_sample_count)
    {
        $this->container['methylation_hm27_sample_count'] = $methylation_hm27_sample_count;

        return $this;
    }

    /**
     * Gets mi_rna_sample_count
     *
     * @return int
     */
    public function getMiRnaSampleCount()
    {
        return $this->container['mi_rna_sample_count'];
    }

    /**
     * Sets mi_rna_sample_count
     *
     * @param int $mi_rna_sample_count mi_rna_sample_count
     *
     * @return $this
     */
    public function setMiRnaSampleCount($mi_rna_sample_count)
    {
        $this->container['mi_rna_sample_count'] = $mi_rna_sample_count;

        return $this;
    }

    /**
     * Gets mrna_microarray_sample_count
     *
     * @return int
     */
    public function getMrnaMicroarraySampleCount()
    {
        return $this->container['mrna_microarray_sample_count'];
    }

    /**
     * Sets mrna_microarray_sample_count
     *
     * @param int $mrna_microarray_sample_count mrna_microarray_sample_count
     *
     * @return $this
     */
    public function setMrnaMicroarraySampleCount($mrna_microarray_sample_count)
    {
        $this->container['mrna_microarray_sample_count'] = $mrna_microarray_sample_count;

        return $this;
    }

    /**
     * Gets mrna_rna_seq_sample_count
     *
     * @return int
     */
    public function getMrnaRnaSeqSampleCount()
    {
        return $this->container['mrna_rna_seq_sample_count'];
    }

    /**
     * Sets mrna_rna_seq_sample_count
     *
     * @param int $mrna_rna_seq_sample_count mrna_rna_seq_sample_count
     *
     * @return $this
     */
    public function setMrnaRnaSeqSampleCount($mrna_rna_seq_sample_count)
    {
        $this->container['mrna_rna_seq_sample_count'] = $mrna_rna_seq_sample_count;

        return $this;
    }

    /**
     * Gets mrna_rna_seq_v2_sample_count
     *
     * @return int
     */
    public function getMrnaRnaSeqV2SampleCount()
    {
        return $this->container['mrna_rna_seq_v2_sample_count'];
    }

    /**
     * Sets mrna_rna_seq_v2_sample_count
     *
     * @param int $mrna_rna_seq_v2_sample_count mrna_rna_seq_v2_sample_count
     *
     * @return $this
     */
    public function setMrnaRnaSeqV2SampleCount($mrna_rna_seq_v2_sample_count)
    {
        $this->container['mrna_rna_seq_v2_sample_count'] = $mrna_rna_seq_v2_sample_count;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pmid
     *
     * @return string
     */
    public function getPmid()
    {
        return $this->container['pmid'];
    }

    /**
     * Sets pmid
     *
     * @param string $pmid pmid
     *
     * @return $this
     */
    public function setPmid($pmid)
    {
        $this->container['pmid'] = $pmid;

        return $this;
    }

    /**
     * Gets public_study
     *
     * @return bool
     */
    public function getPublicStudy()
    {
        return $this->container['public_study'];
    }

    /**
     * Sets public_study
     *
     * @param bool $public_study public_study
     *
     * @return $this
     */
    public function setPublicStudy($public_study)
    {
        $this->container['public_study'] = $public_study;

        return $this;
    }

    /**
     * Gets read_permission
     *
     * @return bool
     */
    public function getReadPermission()
    {
        return $this->container['read_permission'];
    }

    /**
     * Sets read_permission
     *
     * @param bool $read_permission read_permission
     *
     * @return $this
     */
    public function setReadPermission($read_permission)
    {
        $this->container['read_permission'] = $read_permission;

        return $this;
    }

    /**
     * Gets reference_genome
     *
     * @return string
     */
    public function getReferenceGenome()
    {
        return $this->container['reference_genome'];
    }

    /**
     * Sets reference_genome
     *
     * @param string $reference_genome reference_genome
     *
     * @return $this
     */
    public function setReferenceGenome($reference_genome)
    {
        $this->container['reference_genome'] = $reference_genome;

        return $this;
    }

    /**
     * Gets rppa_sample_count
     *
     * @return int
     */
    public function getRppaSampleCount()
    {
        return $this->container['rppa_sample_count'];
    }

    /**
     * Sets rppa_sample_count
     *
     * @param int $rppa_sample_count rppa_sample_count
     *
     * @return $this
     */
    public function setRppaSampleCount($rppa_sample_count)
    {
        $this->container['rppa_sample_count'] = $rppa_sample_count;

        return $this;
    }

    /**
     * Gets sequenced_sample_count
     *
     * @return int
     */
    public function getSequencedSampleCount()
    {
        return $this->container['sequenced_sample_count'];
    }

    /**
     * Sets sequenced_sample_count
     *
     * @param int $sequenced_sample_count sequenced_sample_count
     *
     * @return $this
     */
    public function setSequencedSampleCount($sequenced_sample_count)
    {
        $this->container['sequenced_sample_count'] = $sequenced_sample_count;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets study_id
     *
     * @return string
     */
    public function getStudyId()
    {
        return $this->container['study_id'];
    }

    /**
     * Sets study_id
     *
     * @param string $study_id study_id
     *
     * @return $this
     */
    public function setStudyId($study_id)
    {
        $this->container['study_id'] = $study_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


